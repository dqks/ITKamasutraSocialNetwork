{"version":3,"file":"static/js/972.1788f313.chunk.js","mappings":"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","sources":["hooks/useAuth.js","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","redux/profileSelectors.js","components/Profile/ProfileStatus/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","webpack://my-app/./src/components/Profile/MyPosts/PostForm/PostForm.module.css?40ad","components/FormValidation/PostFormSchema.js","components/Profile/MyPosts/PostForm/PostForm.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/Profile.jsx"],"sourcesContent":["import {useEffect} from \"react\";\r\nimport {useLocation, useNavigate, useParams} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getIsAuth} from \"../redux/authSelectors\";\r\n\r\nexport const useAuth = () => {\r\n    const location = useLocation();\r\n    const auth = useSelector(getIsAuth);\r\n    const navigate = useNavigate();\r\n    const params = useParams();\r\n    let userId = params.userId;\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            return\r\n        } else if (!auth) {\r\n            navigate(\"/login\");\r\n        } else {\r\n            navigate(location)\r\n        }\r\n    }, [navigate, auth])\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"profileMain\":\"ProfileInfo_profileMain__7GnZF\",\"avatar\":\"ProfileInfo_avatar__OJigT\"};","export const getProfile = state => state.profilePage.profile;\r\n\r\nexport const getProfileStatus = state => state.profilePage.profileStatus;\r\n\r\nexport const getPostData = state => state.profilePage.postData;","import {memo, useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setProfileStatus} from \"../../../redux/profileReducer\";\r\nimport {getAuthUserId} from \"../../../redux/authSelectors\";\r\nimport {getProfileStatus} from \"../../../redux/profileSelectors\";\r\n\r\nconst ProfileStatus = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const authUserId = useSelector(getAuthUserId)\r\n    const profileStatus = useSelector(getProfileStatus)\r\n    const [status, setStatus] = useState(profileStatus)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        setStatus(profileStatus)\r\n    }, [profileStatus]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        dispatch(setProfileStatus(status))\r\n    }\r\n\r\n    const changeStatusText = event => {\r\n        setStatus(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                authUserId !== props.profileId\r\n                    ? (<div>\r\n                        <span>{profileStatus}</span>\r\n                    </div>)\r\n                    : <div>\r\n                        {!editMode\r\n                            ? <div>\r\n                                <span data-testid=\"status\" onDoubleClick={activateEditMode}>{profileStatus}</span>\r\n                            </div>\r\n                            : <div>\r\n                                <input className={\"inputTest\"} name=\"status\" onChange={changeStatusText} autoFocus={true} placeholder={\"Status\"} onBlur={deactivateEditMode} type=\"text\"\r\n                                       value={status}/>\r\n                            </div>}\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(ProfileStatus);","import classes from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport defaultAvatar from \"../../../assets/avatar.jpg\";\r\nimport ProfileStatus from \"../ProfileStatus/ProfileStatus\";\r\nimport {memo} from \"react\";\r\n\r\nconst ProfileInfo = ({profile}) => {\r\n    if (!profile) {\r\n        return <Preloader />\r\n    } else {\r\n        return (\r\n            <div className={classes.profileInfo}>\r\n                <div className={classes.profileMain}>\r\n                    <img className={classes.avatar} src={profile.photos.large\r\n                        ? profile.photos.large\r\n                        : defaultAvatar} alt=\"Avatar\" />\r\n                    <div>\r\n                        <p>{profile.fullName}</p>\r\n                        <ProfileStatus profileId={profile.userId} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default memo(ProfileInfo);","// extracted by mini-css-extract-plugin\nexport default {\"myPosts\":\"MyPosts_myPosts__jTWRD\",\"posts\":\"MyPosts_posts__Im4u5\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__q7I6O\",\"info\":\"Post_info__Xw9Ia\",\"likeButton\":\"Post_likeButton__LP4sL\",\"likeIcon\":\"Post_likeIcon__2k2vD\"};","import classes from \"./Post.module.css\"\r\nimport avatar from \"../../../../assets/avatar.jpg\"\r\nimport {memo} from \"react\";\r\n\r\nconst Post = (props) => {\r\n    let likeButtonClick = () => {\r\n        props.likeButtonClick(props.id)\r\n    }\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src={avatar} alt=\"Logo\"/>\r\n            <div className={classes.info}>\r\n                <p>{props.message}</p>\r\n                <button onClick={likeButtonClick} className={classes.likeButton}>\r\n                    <span>{props.likeCount}</span>\r\n                    <span className={classes.likeIcon}>&#10084;</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Post);","// extracted by mini-css-extract-plugin\nexport default {\"errorBorder\":\"PostForm_errorBorder__1DmBO\",\"addPostButton\":\"PostForm_addPostButton__cIt+y\"};","import * as Yup from 'yup';\r\n\r\nconst postFormSchema = Yup.object().shape({\r\n    postText: Yup.string()\r\n        .required(\"Required\"),\r\n})\r\n\r\nexport default postFormSchema;","import {Field, Form, Formik} from \"formik\";\r\nimport classes from \"./PostForm.module.css\";\r\nimport React from \"react\";\r\nimport PostFormSchema from \"../../../FormValidation/PostFormSchema\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addPostActionCreator} from \"../../../../redux/profileReducer\";\r\n\r\nconst PostForm = () => {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Formik initialValues={{postText: \"\"}}\r\n                onSubmit={(value, actions) => {\r\n                    dispatch(addPostActionCreator(value.postText))\r\n                    actions.resetForm();\r\n                }}\r\n                validateOnBlur={false}\r\n                validateOnChange={true}\r\n                validationSchema={PostFormSchema}>\r\n                {({errors}) => {\r\n                    return <Form>\r\n                        <div>\r\n                            <Field component={\"textarea\"} className={errors.postText ? classes.errorBorder : null} cols={\"40\"} rows={3} type={\"text\"} name={\"postText\"} />\r\n                        </div>\r\n                        <div>\r\n                            <button type=\"submit\" className={classes.addPostButton}>Add post</button>\r\n                        </div>\r\n                    </Form>\r\n                }}\r\n        </Formik>\r\n    )\r\n}\r\n// className={errors.messageText ? classes.errorBorder : null}\r\nexport default PostForm;","import classes from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post.jsx\"\r\nimport React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    addLikeButtonActionCreator,\r\n} from \"../../../redux/profileReducer\";\r\nimport PostForm from \"./PostForm/PostForm\";\r\nimport {getPostData} from \"../../../redux/profileSelectors\";\r\n\r\nconst MyPosts = () => {\r\n    const posts = useSelector(getPostData);\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    let likeButtonClick = (postId) => {\r\n        dispatch(addLikeButtonActionCreator(postId))\r\n    }\r\n\r\n    let postArr = posts.map(el => <Post key={el.id} likeButtonClick={likeButtonClick} message={el.message}\r\n                                        likeCount={el.likeCount} id={el.id}/>)\r\n\r\n    return (\r\n        <div className={classes.myPosts}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <PostForm/>\r\n            </div>\r\n            <div className={classes.posts}>\r\n                {postArr}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(MyPosts);","import ProfileInfo from \"./ProfileInfo/ProfileInfo\"\r\nimport React, {memo, useEffect} from \"react\";\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getProfileStatus, getUserProfile, setProfileActionCreator} from \"../../redux/profileReducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useAuth} from \"../../hooks/useAuth\";\r\nimport {getAuthUserId} from \"../../redux/authSelectors\";\r\nimport {getProfile} from \"../../redux/profileSelectors\";\r\n\r\nconst Profile = () => {\r\n    const params = useParams();\r\n\r\n    const authUserId = useSelector(getAuthUserId)\r\n    const profile = useSelector(getProfile);\r\n    const dispatch = useDispatch();\r\n\r\n    useAuth()\r\n\r\n    useEffect(() => {\r\n        let userId = params.userId;\r\n        if (!userId) {\r\n            userId = authUserId;\r\n        }\r\n        if (userId) {\r\n            dispatch(getUserProfile(userId));\r\n            dispatch(getProfileStatus(userId))\r\n        }\r\n\r\n        return () => {\r\n            dispatch(setProfileActionCreator(null))\r\n        }\r\n    }, [params]);\r\n\r\n\r\n    return <div>\r\n            <ProfileInfo profile={profile}/>\r\n            <MyPosts/>\r\n        </div>\r\n\r\n}\r\n\r\nexport default memo(Profile);"],"names":["useAuth","location","useLocation","auth","useSelector","getIsAuth","navigate","useNavigate","userId","useParams","useEffect","getProfile","state","profilePage","profile","getProfileStatus","profileStatus","getPostData","postData","ProfileStatus","props","editMode","setEditMode","useState","authUserId","getAuthUserId","status","setStatus","dispatch","useDispatch","_jsx","children","profileId","className","name","onChange","event","target","value","autoFocus","placeholder","onBlur","deactivateEditMode","setProfileStatus","type","onDoubleClick","activateEditMode","memo","ProfileInfo","_ref","classes","profileInfo","_jsxs","profileMain","avatar","src","photos","large","defaultAvatar","alt","fullName","Preloader","Post","message","onClick","likeButtonClick","id","likeCount","Yup","shape","postText","required","PostForm","Formik","initialValues","onSubmit","actions","addPostActionCreator","resetForm","validateOnBlur","validateOnChange","validationSchema","PostFormSchema","errors","Form","Field","component","cols","rows","MyPosts","posts","postId","addLikeButtonActionCreator","postArr","map","el","React","Profile","params","getUserProfile","setProfileActionCreator"],"sourceRoot":""}