{"version":3,"file":"static/js/395.5795a50c.chunk.js","mappings":"oJAKO,MAAMA,EAAUA,KACnB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,IAAYC,EAAAA,IACnBC,GAAWC,EAAAA,EAAAA,MAEjB,IAAIC,GADWC,EAAAA,EAAAA,KACKD,QAEpBE,EAAAA,EAAAA,WAAU,KACFF,GAKAF,EAHQH,EAGCF,EAFA,WAId,CAACK,EAAUH,I,8CCnBlB,QAA0B,yBAA1B,EAAiE,6BAAjE,EAAyG,0BAAzG,EAAkJ,8BCAlJ,EAAuB,yBAAvB,EAAyD,2BAAzD,EAA6F,2B,uCCI7F,MAAMQ,EAAcC,IAEZC,EAAAA,EAAAA,KAAA,OAAAC,UACID,EAAAA,EAAAA,KAACE,EAAAA,GAAO,CAACC,GAAI,YAAcJ,EAAMK,GAAIC,UAAWC,EAAaL,UACzDM,EAAAA,EAAAA,MAAA,KAAGF,UAAWC,EAAeL,SAAA,EACzBD,EAAAA,EAAAA,KAAA,OAAKQ,IAAKC,EAAKC,IAAI,SAASL,UAAWC,IACtCP,EAAMY,YAO3B,GAAeC,EAAAA,EAAAA,MAAKd,GCfde,EAAWd,IAETC,EAAAA,EAAAA,KAAA,OAAAC,SACKF,EAAMe,UAKnB,GAAeF,EAAAA,EAAAA,MAAKC,G,6BCVpB,SAAgB,YAAc,iCAAiC,YAAc,iCAAiC,YAAc,kC,aCC5H,MAKA,EAL0BE,EAAAA,KAAaC,MAAM,CACzCC,YAAaF,EAAAA,KACRG,SAAS,c,aCGlB,MAAMC,EAAcA,KAChB,MAAMC,GAAWC,EAAAA,EAAAA,MACjB,OACIrB,EAAAA,EAAAA,KAACsB,EAAAA,GAAM,CAACC,cAAe,CAACN,YAAa,IAC7BO,SAAUA,CAACC,EAAQC,KACfN,GAASO,EAAAA,EAAAA,GAAwBF,EAAOR,cACxCS,EAAQE,aAEZC,gBAAgB,EAChBC,kBAAkB,EAClBC,iBAAkBC,EAAkB/B,SACvCgC,IAAe,IAAd,OAACC,GAAOD,EACN,OACI1B,EAAAA,EAAAA,MAAC4B,EAAAA,GAAI,CAAAlC,SAAA,EACDD,EAAAA,EAAAA,KAACoC,EAAAA,GAAK,CAACC,KAAM,OAAQ1B,KAAM,cAAeN,UAAW,CAACC,EAAQW,YAAaiB,EAAOjB,YAAcX,EAAQgC,YAAc,MAAMC,KAAK,KAAMC,KAAM,MAC7IxC,EAAAA,EAAAA,KAAA,UAAQqC,KAAM,SAAUhC,UAAWC,EAAQmC,YAAYxC,SAAC,kEAQhF,GAAeW,EAAAA,EAAAA,MAAKO,GC9BPuB,EAAaC,GAASA,EAAMC,YAAYC,QAExCC,EAAcH,GAASA,EAAMC,YAAYG,SCOhDC,EAAUA,MACZ7D,EAAAA,EAAAA,KAEA,IAAI0D,GAAUtD,EAAAA,EAAAA,IAAYmD,GACtBK,GAAWxD,EAAAA,EAAAA,IAAYuD,GAEvBG,EAAaJ,EACZK,IAAIC,IAAMnD,EAAAA,EAAAA,KAACF,EAAU,CAACa,KAAMwC,EAAGxC,KAAkBP,GAAI+C,EAAG/C,IAAd+C,EAAG/C,KAE9CgD,EAAcL,EACbG,IAAIC,IAAMnD,EAAAA,EAAAA,KAACa,EAAO,CAAaC,QAASqC,EAAGrC,SAAnBqC,EAAG/C,KAEhC,OACIG,EAAAA,EAAAA,MAAA,OAAKF,UAAWC,EAAgBL,SAAA,EAC5BD,EAAAA,EAAAA,KAAA,OAAKK,UAAWC,EAAoBL,SAC/BgD,KAGLjD,EAAAA,EAAAA,KAAA,OAAKK,UAAWC,EAAiBL,SAC5BmD,KAGLpD,EAAAA,EAAAA,KAAA,OAAKK,UAAWC,EAAqBL,UACjCD,EAAAA,EAAAA,KAACmB,EAAW,UAM5B,GAAeP,EAAAA,EAAAA,MAAKoC,E","sources":["hooks/useAuth.js","webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://my-app/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","webpack://my-app/./src/components/Dialogs/MessageForm/MessageForm.module.css?93bd","components/FormValidation/MessageFormSchema.js","components/Dialogs/MessageForm/MessageForm.jsx","redux/dialogsSelectors.js","components/Dialogs/Dialogs.jsx"],"sourcesContent":["import {useEffect} from \"react\";\r\nimport {useLocation, useNavigate, useParams} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getIsAuth} from \"../redux/authSelectors\";\r\n\r\nexport const useAuth = () => {\r\n    const location = useLocation();\r\n    const auth = useSelector(getIsAuth);\r\n    const navigate = useNavigate();\r\n    const params = useParams();\r\n    let userId = params.userId;\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            return\r\n        } else if (!auth) {\r\n            navigate(\"/login\");\r\n        } else {\r\n            navigate(location)\r\n        }\r\n    }, [navigate, auth])\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__-w4rA\",\"dialogItems\":\"Dialogs_dialogItems__440ao\",\"messages\":\"Dialogs_messages__JipLW\",\"messageInput\":\"Dialogs_messageInput__x8PR6\",\"active\":\"Dialogs_active__i6jKI\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"DialogItem_item__Z2y1w\",\"avatar\":\"DialogItem_avatar__jHxwU\",\"dialog\":\"DialogItem_dialog__FOgob\"};","import classes from \"./DialogItem.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport React, {memo} from \"react\";\r\nimport img from \"../../../assets/avatar.jpg\"\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div>\r\n            <NavLink to={\"/dialogs/\" + props.id} className={classes.item}>\r\n                <p className={classes.dialog}>\r\n                    <img src={img} alt=\"avatar\" className={classes.avatar}/>\r\n                    {props.name}\r\n                </p>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(DialogItem);\r\n","// import classes from \"./Mesage.module.css\"\r\nimport {memo} from \"react\";\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Message);","// extracted by mini-css-extract-plugin\nexport default {\"messageText\":\"MessageForm_messageText__c9-VR\",\"sendMessage\":\"MessageForm_sendMessage__rnc80\",\"errorBorder\":\"MessageForm_errorBorder__OiAfg\"};","import * as Yup from 'yup';\r\n\r\nconst messageFormSchema = Yup.object().shape({\r\n    messageText: Yup.string()\r\n        .required(\"Required\"),\r\n})\r\n\r\nexport default messageFormSchema;","import {ErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport classes from \"./MessageForm.module.css\"\r\nimport React, {memo} from \"react\";\r\nimport MessageFormSchema from \"../../FormValidation/MessageFormSchema\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addMessageActionCreator} from \"../../../redux/dialogsReducer\";\r\n\r\nconst MessageForm = () => {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Formik initialValues={{messageText: \"\"}}\r\n                onSubmit={(values, actions) => {\r\n                    dispatch(addMessageActionCreator(values.messageText))\r\n                    actions.resetForm()\r\n                }}\r\n                validateOnBlur={false}\r\n                validateOnChange={true}\r\n                validationSchema={MessageFormSchema}>\r\n            {({errors}) => {\r\n                return (\r\n                    <Form>\r\n                        <Field type={\"text\"} name={\"messageText\"} className={[classes.messageText, errors.messageText ? classes.errorBorder : null].join(\" \")} size={40}/>\r\n                        <button type={\"submit\"} className={classes.sendMessage}>Отправить</button>\r\n                    </Form>\r\n                )\r\n            }}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default memo(MessageForm);","export const getDialogs = state => state.dialogsPage.dialogs;\r\n\r\nexport const getMessages = state => state.dialogsPage.messages;","import classes from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {memo} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useAuth} from \"../../hooks/useAuth\";\r\nimport MessageForm from \"./MessageForm/MessageForm\";\r\nimport {getDialogs, getMessages} from \"../../redux/dialogsSelectors\";\r\n\r\nconst Dialogs = () => {\r\n    useAuth()\r\n\r\n    let dialogs = useSelector(getDialogs);\r\n    let messages = useSelector(getMessages);\r\n\r\n    let dialogsArr = dialogs\r\n        .map(el => <DialogItem name={el.name} key={el.id} id={el.id}/>)\r\n\r\n    let messagesArr = messages\r\n        .map(el => <Message key={el.id} message={el.message}/>)\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogItems}>\r\n                {dialogsArr}\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                {messagesArr}\r\n            </div>\r\n\r\n            <div className={classes.messageInput}>\r\n                <MessageForm/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Dialogs);"],"names":["useAuth","location","useLocation","auth","useSelector","getIsAuth","navigate","useNavigate","userId","useParams","useEffect","DialogItem","props","_jsx","children","NavLink","to","id","className","classes","_jsxs","src","img","alt","name","memo","Message","message","Yup","shape","messageText","required","MessageForm","dispatch","useDispatch","Formik","initialValues","onSubmit","values","actions","addMessageActionCreator","resetForm","validateOnBlur","validateOnChange","validationSchema","MessageFormSchema","_ref","errors","Form","Field","type","errorBorder","join","size","sendMessage","getDialogs","state","dialogsPage","dialogs","getMessages","messages","Dialogs","dialogsArr","map","el","messagesArr"],"sourceRoot":""}